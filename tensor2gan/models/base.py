from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import tensorflow as tf

# from tensor2gan.libs.inception_score.model import get_inception_score

def convert2int(image):
    """ Transfrom from float tensor ([-1.,1.]) to int image ([0,255])
    """
    return tf.image.convert_image_dtype((image+1.0) * 127.5, tf.uint8)

def batch_convert2int(images):
    return tf.map_fn(convert2int, images, dtype=tf.uint8)

class BaseGAN(object):

    def __init__(self, config):
        """Base GAN class, defines common props and methods to be subclassed
        Args:
            config: Object or hparams with model configurations
        Properties:
            optimizers: dict of Tensors
            losses: dict of Tensors
            outputs: dict of Tensors
        """
        self.build_model(config)
        self.optimizers = None
        self.losses = None
        self.outputs = None

    def build_model(self, config):
        raise NotImplementedError()

    def model(self, inputs):
        """GAN model function
        Returns:
            losses: dict of model loss tensors
            outputs: dict of output tensors
            optimizers: dict of optimizers
        """
        raise NotImplementedError()
    
    def gan_sample(self, z):
        """Generator output for given noise tensor Z. 
        Args:
            z: noise tensor with shape [batch_size, z_dim]
        Returns:
            Tensor of fake images generated by G(z), 
            has shape [b, h, w, c]
        """
        raise NotImplementedError()    

    def eval(self, z):
        """evaluate with inception score. 
        Args:
            z: noise tensor with shape [eval_size, z_dim]
        Returns:
            mean, std: floats with inception scores
        """
        # eval_images = self.gan_sample(z)
        # inception_score_mean, inception_score_std = get_inception_score(eval_images)
        # return inception_score_mean, inception_score_std
        raise NotImplementedError()    