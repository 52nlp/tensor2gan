#!/usr/bin/env python
# -*- coding: utf-8 -*-

import tensorflow as tf
import numpy as np
import os

import tensorflow.contrib.gan as tfgan
from tensorflow.contrib.learn.python.learn import learn_runner

from tensor2gan.data_generators.cifar10 import GenerateCIFAR10
from tensor2gan.data_generators.pokemon import GeneratePokemon

from tensor2gan.models.dcgan import DCGAN, dcgan_base
from tensor2gan.models.sn_dcgan import SN_DCGAN

flags = tf.flags
FLAGS = flags.FLAGS

# experiment settings
flags.DEFINE_string("model_dir", default_value='./train', 
    docstring="train results directory")
flags.DEFINE_string("data_dir", "./data", "train data directory")

flags.DEFINE_float("train_steps", 30000, "max number of training steps")
flags.DEFINE_integer("eval_steps", 10, "Number of steps in evaluation.")
flags.DEFINE_integer("local_eval_frequency", 2000,
                     "Run evaluation every this steps during local training.")
flags.DEFINE_string("schedule", "train_and_evaluate",
                    "Method of tf.contrib.learn.Experiment to run.")

# model/dataset
flags.DEFINE_string("generator", "GenerateCIFAR10", 
    "Specify data_generator class. [GenerateCIFAR10|GeneratePokemon]")
flags.DEFINE_string("model", "DCGAN", 
    "Specify model class. [DCGAN|SN_DCGAN]")

# hparams
flags.DEFINE_string("hparams_set", "dcgan_base", 
    "hparams_set. Default=dcgan_base")
flags.DEFINE_string("hparams", "", 
    "custom hparams, e.g. 'batch_size=32, z_dim=100'")

def get_data_generator():
    class_name = FLAGS.generator
    _class = globals()[class_name]
    return _class()

def create_input_fn(data_generator, hparams, train=True):

    input_fn = data_generator.get_input_fn(
        batch_size=hparams.batch_size, 
        data_dir=FLAGS.data_dir, 
        train=True)

    # input pipeline with noise
    def input_fn():
        noise = tf.random_normal([hparams.batch_size, hparams.z_dim])
        images, labels = input_fn()
        return noise, images
    
    return input_fn

def create_estimator(data_generator, model_name, run_config, hparams):
    input_shape = data_generator.input_shape
    gan = globals()[model_name]()

    generator_fn = gan.generator(output_shape=input_shape)
    discriminator_fn = gan.discriminator()

    model_dir = run_config.model_dir
    d_opt = tf.train.AdamOptimizer(hparams.dis_learning_rate, hparams.dis_adam_beta1)
    g_opt = tf.train.AdamOptimizer(hparams.gen_learning_rate, hparams.gen_adam_beta1)

    return tfgan.estimator.GANEstimator(
        model_dir=model_dir,
        generator_fn=generator_fn,
        discriminator_fn=discriminator_fn,
        generator_loss_fn=tfgan.losses.wasserstein_generator_loss,
        discriminator_loss_fn=tfgan.losses.wasserstein_discriminator_loss,
        generator_optimizer=g_opt,
        discriminator_optimizer=d_opt,
        config=run_config
    )


def create_experiment_fn(run_config, hparams):
    """Returns callable function to create Experiment, for learn_runner API"""
    data_generator = get_data_generator()
    model_name = FLAGS.model

    def experiment_fn(run_config, hparams):
        estimator = create_estimator(data_generator, model_name, run_config, hparams)
        train_input_fn = create_input_fn(data_generator, hparams, train=True)
        eval_input_fn = create_input_fn(data_generator, hparams, train=False)

        experiment = tf.contrib.learn.Experiment(
            estimator=estimator,
            train_input_fn=train_input_fn,
            eval_input_fn=eval_input_fn,
            train_steps=FLAGS.train_steps,
            eval_steps=FLAGS.eval_steps,
            train_monitors=[],
            eval_hooks=[],
            train_steps_per_iteration=FLAGS.local_eval_frequency,
            eval_delay_secs=0,)
        return experiment
    
    return experiment_fn

def create_run_config(model_dir):
    """Create a RunConfig object."""
    return tf.contrib.learn.RunConfig(model_dir=model_dir)

def create_hparams(hparams_set):
    hparams = globals()[hparams_set]()
    hparams.parse(FLAGS.hparams)
    return hparams

def main(_):
    # experiment components
    run_config = create_run_config(FLAGS.model_dir)
    hparams = create_hparams(FLAGS.hparams_set)
    experiment_fn = create_experiment_fn(run_config, hparams)

    learn_runner.run(
        experiment_fn=experiment_fn,
        schedule=FLAGS.schedule,
        run_config=run_config,
        hparams=hparams)

if __name__ == '__main__':
    tf.app.run()